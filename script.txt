// Estrutura do projeto:
// src/main/java/com/example/cqrsdemo
//   - CqrsDemoApplication.java
//   - command
//     - api
//       - CreateProductCommand.java
//       - UpdateProductCommand.java
//       - DeleteProductCommand.java
//     - handler
//       - ProductCommandHandler.java
//   - query
//     - api
//       - GetProductQuery.java
//       - GetAllProductsQuery.java
//     - handler
//       - ProductQueryHandler.java
//   - domain
//     - model
//       - Product.java
//     - repository
//       - ProductRepository.java
//   - controller
//     - ProductCommandController.java
//     - ProductQueryController.java
//   - config
//     - CqrsConfig.java
//   - event
//     - ProductCreatedEvent.java
//     - ProductUpdatedEvent.java
//     - ProductDeletedEvent.java

// === CqrsDemoApplication.java ===
package com.example.cqrsdemo;


// === Command API ===
// CreateProductCommand.java
package com.example.cqrsdemo.command.api;

import lombok.Data;

@Data
public class CreateProductCommand {
    private String name;
    private String description;
    private double price;
    private int quantity;
}

// UpdateProductCommand.java
package com.example.cqrsdemo.command.api;

import lombok.Data;

@Data
public class UpdateProductCommand {
    private String id;
    private String name;
    private String description;
    private double price;
    private int quantity;
}

// DeleteProductCommand.java
package com.example.cqrsdemo.command.api;

import lombok.Data;

@Data
public class DeleteProductCommand {
    private String id;
}

// === Command Handler ===
// ProductCommandHandler.java
package com.example.cqrsdemo.command.handler;

import com.example.cqrsdemo.command.api.CreateProductCommand;
import com.example.cqrsdemo.command.api.DeleteProductCommand;
import com.example.cqrsdemo.command.api.UpdateProductCommand;
import com.example.cqrsdemo.domain.model.Product;
import com.example.cqrsdemo.domain.repository.ProductRepository;
import com.example.cqrsdemo.event.ProductCreatedEvent;
import com.example.cqrsdemo.event.ProductDeletedEvent;
import com.example.cqrsdemo.event.ProductUpdatedEvent;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationEventPublisher;
import org.springframework.stereotype.Service;

import java.util.UUID;

@Service
public class ProductCommandHandler {

    private final ProductRepository productRepository;
    private final ApplicationEventPublisher eventPublisher;

    @Autowired
    public ProductCommandHandler(ProductRepository productRepository, ApplicationEventPublisher eventPublisher) {
        this.productRepository = productRepository;
        this.eventPublisher = eventPublisher;
    }

    public String handleCreateProductCommand(CreateProductCommand command) {
        Product product = new Product();
        product.setId(UUID.randomUUID().toString());
        product.setName(command.getName());
        product.setDescription(command.getDescription());
        product.setPrice(command.getPrice());
        product.setQuantity(command.getQuantity());

        productRepository.save(product);
        
        // Publicar evento
        eventPublisher.publishEvent(new ProductCreatedEvent(product));
        
        return product.getId();
    }

    public void handleUpdateProductCommand(UpdateProductCommand command) {
        Product product = productRepository.findById(command.getId())
                .orElseThrow(() -> new RuntimeException("Product not found with id: " + command.getId()));
        
        product.setName(command.getName());
        product.setDescription(command.getDescription());
        product.setPrice(command.getPrice());
        product.setQuantity(command.getQuantity());

        productRepository.save(product);
        
        // Publicar evento
        eventPublisher.publishEvent(new ProductUpdatedEvent(product));
    }

    public void handleDeleteProductCommand(DeleteProductCommand command) {
        Product product = productRepository.findById(command.getId())
                .orElseThrow(() -> new RuntimeException("Product not found with id: " + command.getId()));
        
        productRepository.delete(product);
        
        // Publicar evento
        eventPublisher.publishEvent(new ProductDeletedEvent(command.getId()));
    }
}

// === Query API ===
// GetProductQuery.java
package com.example.cqrsdemo.query.api;

import lombok.AllArgsConstructor;
import lombok.Data;

@Data
@AllArgsConstructor
public class GetProductQuery {
    private String id;
}

// GetAllProductsQuery.java


// === Query Handler ===
// ProductQueryHandler.java


// === domain imports ===

// === Repository ===
// ProductRepository.java

// === CQRS API Gateway ===
// CqrsApiGateway.java


// === Events ===
// ProductCreatedEvent.java

// ProductUpdatedEvent.java


// ProductDeletedEvent.java

// === Configuration ===
// CqrsConfig.java


// === application.properties ===
// spring.datasource.url=jdbc:mysql://localhost:3306/cqrs_demo
// spring.datasource.username=root
// spring.datasource.password=root
// spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
// spring.jpa.hibernate.ddl-auto=update
// spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQLDialect
// server.port=8080

// === pom.xml ===



// opcional

// === REST Controller Adapter (opcional para expor API externamente) ===





//TEST 3


// TEST 4

// === Test Resources ===
// src/test/resources/application-test.properties

